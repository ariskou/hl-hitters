/*
Network.h

Copyright 2011 Remous-Aris Koutsiamanis

This file is part of HL-Hitters.

HL-Hitters is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

HL-Hitters is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with HL-Hitters.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef NETWORK_H_
#define NETWORK_H_

#include "Common.h"

class Flow; // Forward declaration
typedef Flow* FlowP;  // A pointer to a Flow, used extensively

// A Packet, generated by a Flow, moves through the queue
class Packet{
public:
    FlowP flowp;  // The Flow that generated it
    uint seq_num; // Its sequence number

    Packet(FlowP flowp, uint seq_num)
    :flowp(flowp), seq_num(seq_num){}
};

// A Flow, generates Packets
class Flow {
public:
    uint id;  // The Id of the Flow
    uint seq_num;  // The sequence number of the last packet sent

    Flow(uint id)
    :id(id)
    {
        seq_num = 1;
    }

    // Generate a new packet
    Packet NewPacket() {
        Packet p(this, seq_num);
        seq_num++;
        return p;
    }
    friend std::ostream& operator<< (std::ostream &, Flow &);
};

// Helper function for printing
std::ostream& operator<< (std::ostream &out, Flow &f){
    out << "F" << f.id;
    return out;
}

// Helper function for printing
std::ostream& operator<< (std::ostream &out, Packet &p){
    out << "P" << p.flowp->id;
    return out;
}

// A Queue based on std::deque but which has an upper bound on the items it can contain
template <class T>
class MaxQueue : public std::deque<T>{
public:
    uint max_queue_size;

    MaxQueue(uint max_queue_size)
    :max_queue_size(max_queue_size) {}

    // Modified method to limit the number of items in it.
    // In this implementation exceeding the limit is an error, i.e. dropped packet are not allowed.
    void push_back ( const T& x ){
        if(std::deque<T>::size()>=max_queue_size){
            std::cout << "Error: Queue size exceeded. This queue cannot handle more than " << max_queue_size << " items" << std::endl;
            ::exit(-1);
        }
        std::deque<T>::push_back(x);
    }
};


// Flow-Count and Count-Flow pairs and maps
typedef std::pair< FlowP, uint> FlowCountPair;  // A pair of a Flow (pointer) and an integer count
typedef std::pair< uint, FlowP> CountFlowPair;  // A pair of an integer count and a Flow (pointer)

typedef boost::unordered_map<FlowP, uint> FlowCountMap;  // A map from a FlowP to an integer count
typedef std::vector<FlowCountPair> HittersQueryResult;  // A vector of FlowP-Count Pairs


// Helper overloaded operator for output
std::ostream& operator<< (std::ostream &out, const FlowCountPair & fcp){
    out << "FC[" << *(fcp.first) << ", " << fcp.second << "]";
    return out;
}

#endif /* NETWORK_H_ */
